version: "3.8" #docker composeのversion指定。dodker composeとは、一つの簡単なコマンドで複数のコンテナを管理できるようにするためのもの
services: #services に app と　web と db を定義
  #アプリケーションサーバコンテナを作成
  app: #アプリケーションサーバの名前をappと定義
    build:
      ./infra/php #ビルドコンテキストを指定。正確には./infra/php/Dockerfile
      #ビルドコンテキストとは、docker buildコマンドを実行する際の現在の作業ディレクトリのこと.
      #Dockerfileには、Dockerイメージを作り上げるために実行する命令を書く
    volumes: #volumeの定義
      - ./backend:/work #volumeは、コンテナのライフサイクルが終了した後でもデータを保管しておけるデータ領域
        #ホスト側の ./backend ディレクトリをappサービスのコンテナ内 /work へマウント
        #ここでの「マウント」とは、コンテナの外にあるディレクトリを、コンテナの中から利用できるようにする機能のこと
        #通常コンテナを立ち上げた後にコンテナ内でファイルを生成したあとコンテナを削除した場合、そのファイルは消える。
        #けどマウントするとフィアルが消えなくなる。（ホストOSに保存されている）
        #mountの仕方は他にも2種類あるけど、基本はvolumusで良さそう。

  web: #nginxウェブサーバーコンテナを作成。webサーバは静的コンテンツを処理し、アプリケーションサーバは動的コンテンツを処理
    image:
      nginx:1.18-alpine #コンテナを起動させるイメージを指定。今回は公式のnginxイメージをそのまま利用
      #imageをそのまま使いたくないときはbuildを使ってdockerfileで色々設定する。http://tech.innovation.co.jp/2018/01/26/read-docker-files.html
      #dockerのイメージをdockerfileから組み立てて、そのイメージをRUNするとコンテナになる
      #コンテナはイメージのインスタンスと考えると良いかも
    ports:
      - 10080:80 #nginxへ外(ホスト側)からコンテナ内へアクセスさせるため公開用のポートを設定します。
        #ホスト側:コンテナ側 と設定。http通信は基本的に80番
    volumes:
      - ./backend:/work
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    working_dir: /work #workingディレクトリ設定

  db:
    build: ./infra/mysql
    volumes:
      - db-store:/var/lib/mysql



volumes:
  db-store:
